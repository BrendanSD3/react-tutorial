{"version":3,"sources":["forms/AddUserForm","forms/EditUserForm","Tables/UserTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserTable","props","users","length","map","user","key","id","name","username","onClick","editRow","className","deleteUser","colSpan","App","useState","setUsers","currentUser","setCurrentUser","editing","setEditing","updateUser","updatedUser","addUser","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,sLC4C5BC,EA1CG,SAAAC,GAAK,OACrB,+BACE,+BACE,4BACE,oCACA,wCACA,yCAGJ,+BACGA,EAAMC,MAAMC,OAAS,EACpBF,EAAMC,MAAME,KAAI,SAAAC,GAAI,OAClB,wBAAIC,IAAKD,EAAKE,IACZ,4BAAKF,EAAKG,MACV,4BAAKH,EAAKI,UACV,4BACE,4BACEC,QAAS,WACPT,EAAMU,QAAQN,IAEhBO,UAAU,uBAJZ,QAQA,4BACEF,QAAS,kBAAMT,EAAMY,WAAWR,EAAKE,KACrCK,UAAU,uBAFZ,eAUN,4BACE,wBAAIE,QAAS,GAAb,gBCsCKC,EAtEH,WAEX,IAFiB,EAWWC,mBATV,CACjB,CAAET,GAAI,EAAGC,KAAM,QAASC,SAAU,kBAClC,CAAEF,GAAI,EAAGC,KAAM,QAASC,SAAU,kBAClC,CAAEF,GAAI,EAAGC,KAAM,MAAOC,SAAU,gBALhB,mBAWTP,EAXS,KAWFe,EAXE,OAYuBD,mBAJf,CAAET,GAAI,KAAMC,KAAM,GAAIC,SAAU,KARxC,mBAYTS,EAZS,KAYIC,EAZJ,OAaeH,oBAAS,GAbxB,mBAaTI,EAbS,KAaAC,EAbA,KAuCjB,OACC,yBAAKT,UAAU,aACd,mDACA,yBAAKA,UAAU,YACd,yBAAKA,UAAU,cACbQ,EACA,kBAAC,WAAD,KACC,yCACA,kBAAC,IAAD,CACCA,QAASA,EACTC,WAAYA,EACZH,YAAaA,EACbI,WAxBY,SAACf,EAAIgB,GACvBF,GAAW,GAEXJ,EAASf,EAAME,KAAI,SAAAC,GAAI,OAAKA,EAAKE,KAAOA,EAAKgB,EAAclB,UAyBvD,kBAAC,WAAD,KACC,wCACA,kBAAC,IAAD,CAAamB,QAzCH,SAAAnB,GACfA,EAAKE,GAAKL,EAAMC,OAAS,EACzBc,EAAS,GAAD,mBAAMf,GAAN,CAAaG,UA2CnB,yBAAKO,UAAU,cACd,0CACA,kBAAC,EAAD,CAAWV,MAAOA,EAAOS,QA9Bb,SAAAN,GACfgB,GAAW,GAEXF,EAAe,CAAEZ,GAAIF,EAAKE,GAAIC,KAAMH,EAAKG,KAAMC,SAAUJ,EAAKI,YA2BhBI,WA1C5B,SAAAN,GAClBc,GAAW,GAEXJ,EAASf,EAAMuB,QAAO,SAAApB,GAAI,OAAIA,EAAKE,KAAOA,aCjBxBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bad91d4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AddUserForm.ba38888f.bin\";","module.exports = __webpack_public_path__ + \"static/media/EditUserForm.8fcfd06b.bin\";","import React from 'react'\r\n\r\nconst UserTable = props => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Username</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.users.length > 0 ? (\r\n        props.users.map(user => (\r\n          <tr key={user.id}>\r\n            <td>{user.name}</td>\r\n            <td>{user.username}</td>\r\n            <td>\r\n              <button\r\n                onClick={() => {\r\n                  props.editRow(user)\r\n                }}\r\n                className=\"button muted-button\"\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => props.deleteUser(user.id)}\r\n                className=\"button muted-button\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={3}>No users</td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default UserTable","import React, { useState, Fragment } from 'react'\nimport AddUserForm from './forms/AddUserForm'\nimport EditUserForm from './forms/EditUserForm'\nimport UserTable from './Tables/UserTable'\n\nconst App = () => {\n\t// Data\n\tconst usersData = [\n\t\t{ id: 1, name: 'Tania', username: 'floppydiskette' },\n\t\t{ id: 2, name: 'Craig', username: 'siliconeidolon' },\n\t\t{ id: 3, name: 'Ben', username: 'benisphere' },\n\t]\n\n\tconst initialFormState = { id: null, name: '', username: '' }\n\n\t// Setting state\n\tconst [ users, setUsers ] = useState(usersData)\n\tconst [ currentUser, setCurrentUser ] = useState(initialFormState)\n\tconst [ editing, setEditing ] = useState(false)\n\n\t// CRUD operations\n\tconst addUser = user => {\n\t\tuser.id = users.length + 1\n\t\tsetUsers([ ...users, user ])\n\t}\n\n\tconst deleteUser = id => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.filter(user => user.id !== id))\n\t}\n\n\tconst updateUser = (id, updatedUser) => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.map(user => (user.id === id ? updatedUser : user)))\n\t}\n\n\tconst editRow = user => {\n\t\tsetEditing(true)\n\n\t\tsetCurrentUser({ id: user.id, name: user.name, username: user.username })\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1>CRUD App with Hooks</h1>\n\t\t\t<div className=\"flex-row\">\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t{editing ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Edit user</h2>\n\t\t\t\t\t\t\t<EditUserForm\n\t\t\t\t\t\t\t\tediting={editing}\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\n\t\t\t\t\t\t\t\tcurrentUser={currentUser}\n\t\t\t\t\t\t\t\tupdateUser={updateUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Add user</h2>\n\t\t\t\t\t\t\t<AddUserForm addUser={addUser} />\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t<h2>View users</h2>\n\t\t\t\t\t<UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './Api';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}