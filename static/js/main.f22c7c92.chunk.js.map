{"version":3,"sources":["forms/AddUserForm.js","forms/EditUserForm.js","Tables/UserTable.js","Tables/SongsTable.js","forms/AddSongForm.js","forms/EditSongForm.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","username","useState","user","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","type","onChange","EditUserForm","currentUser","useEffect","updateUser","onClick","setEditing","className","UserTable","users","length","map","key","editRow","deleteUser","colSpan","SongsTable","songs","song","editSong","AddSongForm","setSong","addSong","EditSongForm","currentSong","updateSong","setSEditing","App","setCurrentSong","Songediting","setUsers","setCurrentUser","editing","updatedUser","updatedSong","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f22c7c92.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst AddUserForm = props => {\r\n\tconst initialFormState = { id: null, name: '', username: '' }\r\n\tconst [ user, setUser ] = useState(initialFormState)\r\n\r\n\tconst handleInputChange = event => {\r\n\t\tconst { name, value } = event.target\r\n\r\n\t\tsetUser({ ...user, [name]: value })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tonSubmit={event => {\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\tif (!user.name || !user.username) return\r\n\r\n\t\t\t\tprops.addUser(user)\r\n\t\t\t\tsetUser(initialFormState)\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<label>Name</label>\r\n\t\t\t<input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\r\n\t\t\t<label>Username</label>\r\n\t\t\t<input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\r\n\t\t\t<button>Add new user</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default AddUserForm","import React, { useState, useEffect } from 'react'\r\n\r\nconst EditUserForm = props => {\r\n  const [ user, setUser ] = useState(props.currentUser)\r\n\r\n  useEffect(\r\n    () => {\r\n      setUser(props.currentUser)\r\n    },\r\n    [ props ]\r\n  )\r\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setUser({ ...user, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n\r\n        props.updateUser(user.id, user)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\r\n      <label>Username</label>\r\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\r\n      <button>Update user</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditUserForm","import React from 'react'\r\n\r\nconst UserTable = props => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Username</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.users.length > 0 ? (\r\n        props.users.map(user => (\r\n          <tr key={user.id}>\r\n            <td>{user.name}</td>\r\n            <td>{user.username}</td>\r\n            <td>\r\n              <button\r\n                onClick={() => {\r\n                  props.editRow(user)\r\n                }}\r\n                className=\"button muted-button\"\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => props.deleteUser(user.id)}\r\n                className=\"button muted-button\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={3}>No users</td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default UserTable","import React from 'react'\r\n\r\nconst SongsTable = props => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n         <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.songs.length > 0 ? (\r\n        props.songs.map(song => (\r\n          <tr key={song.id}>\r\n            <td>{song.name}</td>\r\n            \r\n            <td>\r\n              <button\r\n                onClick={() => {\r\n                  props.editSong(song)\r\n                }}\r\n                className=\"button muted-button\"\r\n              >\r\n                Edit\r\n              </button>\r\n              \r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={3}>No Songs</td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default SongsTable","import React, { useState } from 'react'\r\n\r\nconst AddSongForm = props => {\r\n\tconst initialFormState = { id: null, name: '' }\r\n\tconst [ song, setSong ] = useState(initialFormState)\r\n\r\n\tconst handleInputChange = event => {\r\n\t\tconst { name, value } = event.target\r\n\r\n\t\tsetSong({ ...song, [name]: value })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tonSubmit={event => {\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\tif (!song.name) return\r\n\t\t\t\tprops.addSong(song)\r\n\t\t\t\tsetSong(initialFormState)\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<label>Song Name</label>\r\n\t\t\t<input type=\"text\" name=\"name\" value={song.name} onChange={handleInputChange} />\r\n\t\t\t\r\n\t\t\t<button>Add new Song</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default AddSongForm","import React, { useState, useEffect } from 'react'\r\n\r\nconst EditSongForm = props => {\r\n  const [ song, setSong ] = useState(props.currentSong)\r\n\r\n  useEffect(\r\n    () => {\r\n      setSong(props.currentSong)\r\n    },\r\n    [ props ]\r\n  )\r\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setSong({ ...song, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n\r\n        props.updateSong(song.id, song)\r\n      }}\r\n    >\r\n      <label>Song Name</label>\r\n      <input type=\"text\" name=\"name\" value={song.name} onChange={handleInputChange} />\r\n     \r\n      <button>Update song</button>\r\n      <button onClick={() => props.setSEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditSongForm","import React, {useState, Fragment } from 'react'\r\nimport AddUserForm from './forms/AddUserForm'\r\nimport EditUserForm from './forms/EditUserForm'\r\nimport UserTable from './Tables/UserTable'\r\nimport SongsTable from './Tables/SongsTable'\r\nimport AddSongForm from './forms/AddSongForm'\r\nimport EditSongForm from './forms/EditSongForm'\r\n\r\n\r\nconst App = () => {\r\n\t// Data\r\n\tconst usersData = [\r\n\t\t{ id: 1, name: 'Tania', username: 'floppydiskette' },\r\n\t\t{ id: 2, name: 'Craig', username: 'siliconeidolon' },\r\n\t\t{ id: 3, name: 'Ben', username: 'benisphere' },\r\n\t]\r\n\tconst songData=[\r\n\t\t{id:1, name:'HighwaytoHell'}\r\n\t]\r\n\t\r\n\tconst initialFormState = { id: null, name: '', username: '' }\r\n\tconst initialSFormState={id:null,name:''}\r\n\t// Setting state\r\n\tconst [songs, setSong]=useState(songData)\r\n\tconst [ currentSong, setCurrentSong ] = useState(initialSFormState)\r\n\tconst [ Songediting, setSEditing ] = useState(false)\r\n\r\n\tconst [ users, setUsers ] = useState(usersData)\r\n\tconst [ currentUser, setCurrentUser ] = useState(initialFormState)\r\n\tconst [ editing, setEditing ] = useState(false)\r\n\r\n\t// CRUD operations USERS\r\n\tconst addUser = user => {\r\n\t\tuser.id = users.length + 1\r\n\t\tsetUsers([ ...users, user ])\r\n\t}\r\n\r\n\tconst deleteUser = id => {\r\n\t\tsetEditing(false)\r\n\r\n\t\tsetUsers(users.filter(user => user.id !== id))\r\n\t}\r\n\r\n\tconst updateUser = (id, updatedUser) => {\r\n\t\tsetEditing(false)\r\n\r\n\t\tsetUsers(users.map(user => (user.id === id ? updatedUser : user)))\r\n\t}\r\n\r\n\tconst editRow = user => {\r\n\t\tsetEditing(true)\r\n\r\n\t\tsetCurrentUser({ id: user.id, name: user.name, username: user.username })\r\n\t}\r\n\t// CRUD Operations Songs\r\n\tconst updateSong = (id, updatedSong) => {\r\n\t\tsetSEditing(false)\r\n\r\n\t\tsetSong(songs.map(song => (song.id === id ? updatedSong : song)))\r\n\t}\r\n\r\n\tconst editSong = song => {\r\n\t\tsetSEditing(true)\r\n\r\n\t\tsetCurrentSong({ id: song.id, name: song.name })\r\n\t}\r\n\tconst addSong = song => {\r\n\t\tsong.id = songs.length + 1\r\n\t\tsetSong([ ...songs, song ])\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t\r\n\t\t\t<h1>CRUD App with Hooks</h1>\r\n\t\t\t<div className=\"flex-row\">\r\n\t\t\t\t<div className=\"flex-large\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t{editing ? (\r\n\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t<h2>Edit user</h2>\r\n\t\t\t\t\t\t\t<EditUserForm\r\n\t\t\t\t\t\t\t\tediting={editing}\r\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\r\n\t\t\t\t\t\t\t\tcurrentUser={currentUser}\r\n\t\t\t\t\t\t\t\tupdateUser={updateUser}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t<h2>Add user</h2>\r\n\t\t\t\t\t\t\t<AddUserForm addUser={addUser} />\r\n\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t\t{Songediting ? (\r\n\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t<h2>Edit songs</h2>\r\n\t\t\t\t\t\t\t<EditSongForm\r\n\t\t\t\t\t\t\t\tSongediting={Songediting}\r\n\t\t\t\t\t\t\t\tsetSEditing={setSEditing}\r\n\t\t\t\t\t\t\t\tcurrentSong={currentSong}\r\n\t\t\t\t\t\t\t\tupdateSong={updateSong}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t<h2>Add songs</h2>\r\n\t\t\t\t\t\t\t<AddSongForm addSong={addSong} />\r\n\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"flex-large\">\r\n\t\t\t\t\t<h2>View users</h2>\r\n\t\t\t\t\t<UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"flex-large\">\r\n\t\t\t\t\t<h2>View songs</h2>\r\n\t\t\t\t\t<SongsTable songs={songs} editSong={editSong} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import App from './Api';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}